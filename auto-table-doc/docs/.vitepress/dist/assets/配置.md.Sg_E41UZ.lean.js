import{_ as d,C as n,c as r,a2 as i,m as l,a,H as t,o as s}from"./chunks/framework.DVcYaelC.js";const S=JSON.parse('{"title":"配置","description":null,"frontmatter":{"title":"配置","description":null},"headers":[],"relativePath":"配置.md","filePath":"配置.md","lastUpdated":1748253823000}'),u={name:"配置.md"},p={class:"tip custom-block"},c={id:"auto-drop-table",tabindex:"-1"},b={id:"auto-drop-table-ignores",tabindex:"-1"},h={id:"auto-drop-custom-index",tabindex:"-1"},m={id:"strict-extends",tabindex:"-1"},f={id:"super-insert-position",tabindex:"-1"},k={id:"pk-auto-increment-type",tabindex:"-1"};function x(g,e,q,y,v,P){const o=n("Badge");return s(),r("div",null,[e[31]||(e[31]=i(`<h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h1><h2 id="auto-table" tabindex="-1">auto-table <a class="header-anchor" href="#auto-table" aria-label="Permalink to &quot;auto-table&quot;">​</a></h2><p>auto-table 配置项前缀</p><p>🌰 举例：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-h0zAs" id="tab-SKWlRgK" checked="checked"><label for="tab-SKWlRgK">yml方式</label><input type="radio" name="group-h0zAs" id="tab-VQR2-Eo"><label for="tab-VQR2-Eo">properties方式</label></div><div class="blocks"><div class="language-yaml vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">auto-table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto-table.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span></code></pre></div></div></div><h3 id="enable" tabindex="-1">enable <a class="header-anchor" href="#enable" aria-label="Permalink to &quot;enable&quot;">​</a></h3><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><p>是否启用自动维护表功能。生产环境可以关闭该功能。</p><h3 id="show-banner" tabindex="-1">show-banner <a class="header-anchor" href="#show-banner" aria-label="Permalink to &quot;show-banner&quot;">​</a></h3><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><p>系统启动的时候是否显示 AutoTable 的 banner 图案。</p><h3 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h3><ul><li>类型：Enum(<code>none</code> | <code>validate</code> ｜ <code>add</code> ｜ <code>create</code> ｜ <code>update</code>)</li><li>默认：<code>update</code></li></ul><p>系统启动模式分为以下几种：</p><p><em>none</em>：系统不做任何处理，与<code>enable</code>设置为<code>false</code>效果一致。</p><p><em>validate</em>：系统启动时，会检查数据库中的表与 java 实体类是否匹配。如果不匹配，则启动失败。</p><p><em>create</em>：系统启动时，会先将所有的表删除掉，然后根据 model 中配置的结构重新建表，该模式会清空原有数据。</p><p><em>update</em>：系统启动时，会自动判断哪些表是新建的，哪些字段要新增修改，哪些索引/约束要新增删除等。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p><code>update</code>模式不会删除字段(更改字段名称的情况下，会认为是新增字段)，如果需要从数据库强制删除实体上不存在的字段，请参考 <a href="/配置.html#auto-drop-column">auto-drop-column</a> 配置项。</p></div><h3 id="model-package" tabindex="-1">model-package <a class="header-anchor" href="#model-package" aria-label="Permalink to &quot;model-package&quot;">​</a></h3><ul><li>类型：<code>String</code></li><li>默认：[Spring 启动类所在包路径]</li></ul><p>model 包路径，多个路径可以用分号或者逗号隔开，框架会递归指定目录下的全部 java 对象。</p>`,22)),l("p",null,[e[0]||(e[0]=a("自 ")),t(o,{type:"tip",text:"^1.7.0"}),e[1]||(e[1]=a(" 开始支持类似 ")),e[2]||(e[2]=l("code",null,"com.bz.**.entity",-1)),e[3]||(e[3]=a(" 的配置方式。"))]),l("div",p,[e[12]||(e[12]=l("p",{class:"custom-block-title"},"提示",-1)),l("p",null,[e[4]||(e[4]=a("自 ")),t(o,{type:"tip",text:"^1.9.6.1"}),e[5]||(e[5]=a(" 开始，@EnableAutoTable中新增了")),e[6]||(e[6]=l("code",null,"basePackages",-1)),e[7]||(e[7]=a("属性，同样可以指定model包路径。"))]),l("p",null,[e[8]||(e[8]=a("自 ")),t(o,{type:"tip",text:"^2.0.1.1"}),e[9]||(e[9]=a(" 开始，@EnableAutoTable中新增了")),e[10]||(e[10]=l("code",null,"classes",-1)),e[11]||(e[11]=a("属性，支持指定model的Class，精细化控制（通常用于单元测试）。"))])]),e[32]||(e[32]=i('<h3 id="index-prefix" tabindex="-1">index-prefix <a class="header-anchor" href="#index-prefix" aria-label="Permalink to &quot;index-prefix&quot;">​</a></h3><ul><li>类型：<code>String</code></li><li>默认：<code>auto_idx_</code></li></ul><p>自定义的索引前缀，会自动追加到索引名称前面，如果想区分普通索引和唯一索引的区别，请在索引名称上自行区别，他们的前缀都是一样的。</p><p>例如，索引注解上配置的名字叫<code>phone</code>，那么完整的索引名称为<code>auto_idx_phone</code> ，如果想标记为唯一索引，索引注解上配置的名字叫<code>uni_phone</code>，那么完整的索引名称为<code>auto_idx_uni_phone</code></p>',4)),l("h3",c,[e[13]||(e[13]=a("auto-drop-table ")),t(o,{type:"warning",text:"^2.4.5"}),e[14]||(e[14]=a()),e[15]||(e[15]=l("a",{class:"header-anchor",href:"#auto-drop-table","aria-label":'Permalink to "auto-drop-table <Badge type="warning" text="^2.4.5" />"'},"​",-1))]),e[33]||(e[33]=l("ul",null,[l("li",null,[a("类型："),l("code",null,"Boolean")]),l("li",null,[a("默认："),l("code",null,"false")])],-1)),e[34]||(e[34]=l("p",null,[a("自动删除没有声明的表。如果配置为"),l("code",null,"true"),a("了，只要表中的表在实体上没有对应的类，就删除该表。")],-1)),e[35]||(e[35]=l("div",{class:"danger custom-block"},[l("p",{class:"custom-block-title"},"警告"),l("p",null,"强烈不建议开启，会发生删库跑路等不可逆的操作。")],-1)),l("h3",b,[e[16]||(e[16]=a("auto-drop-table-ignores ")),t(o,{type:"warning",text:"^2.4.5"}),e[17]||(e[17]=a()),e[18]||(e[18]=l("a",{class:"header-anchor",href:"#auto-drop-table-ignores","aria-label":'Permalink to "auto-drop-table-ignores <Badge type="warning" text="^2.4.5" />"'},"​",-1))]),e[36]||(e[36]=i('<ul><li>类型：<code>String[]</code></li><li>默认：<code>[]</code></li></ul><p>自动删除没有声明的表的过程中，跳过指定的表，不做删除。</p><p>auto-drop-table 配置为 <code>true</code> 时生效。</p><h3 id="auto-drop-column" tabindex="-1">auto-drop-column <a class="header-anchor" href="#auto-drop-column" aria-label="Permalink to &quot;auto-drop-column&quot;">​</a></h3><ul><li>类型：<code>Boolean</code></li><li>默认：<code>false</code></li></ul><p>自动删除数据库中多余的列。如果配置为<code>true</code>了，只要表中的列在实体上没有对应的字段，就删除该字段。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>谨慎开启，列删除后，列上的数据会发生丢失，无法找回</p></div><h3 id="auto-drop-index" tabindex="-1">auto-drop-index <a class="header-anchor" href="#auto-drop-index" aria-label="Permalink to &quot;auto-drop-index&quot;">​</a></h3><ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><p>自动删除数据库中由AutoTable创建(以<code>indexPrefix</code>配置开头的)多余的索引。如果配置为<code>true</code>了，只要表上的索引在实体上没有声明，就删除该索引。</p>',10)),l("h3",h,[e[19]||(e[19]=a("auto-drop-custom-index ")),t(o,{type:"warning",text:"^2.3.3"}),e[20]||(e[20]=a()),e[21]||(e[21]=l("a",{class:"header-anchor",href:"#auto-drop-custom-index","aria-label":'Permalink to "auto-drop-custom-index <Badge type="warning" text="^2.3.3" />"'},"​",-1))]),e[37]||(e[37]=l("ul",null,[l("li",null,[a("类型："),l("code",null,"Boolean")]),l("li",null,[a("默认："),l("code",null,"false")])],-1)),e[38]||(e[38]=l("p",null,[a("自动删除数据库中自定义(不以"),l("code",null,"indexPrefix"),a("配置开头的)的多余的索引。如果配置为"),l("code",null,"true"),a("了，只要表上的索引在实体上没有声明，就删除该索引。")],-1)),l("h3",m,[e[22]||(e[22]=a("strict-extends ")),t(o,{type:"warning",text:"^1.8.4"}),e[23]||(e[23]=a()),e[24]||(e[24]=l("a",{class:"header-anchor",href:"#strict-extends","aria-label":'Permalink to "strict-extends <Badge type="warning" text="^1.8.4" />"'},"​",-1))]),e[39]||(e[39]=i('<ul><li>类型：<code>Boolean</code></li><li>默认：<code>true</code></li></ul><p>子类继承父类的字段的配置，是否开启严格继承的模式：只继承public、protected修饰的字段</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>默认情况下，如果父类的字段修饰是<code>private</code>的，则不会被子类继承。</p><p>可以配置为<code>false</code>来解决，但是建议，修改父类的字段修饰符为<code>protected</code></p></div>',3)),l("h3",f,[e[25]||(e[25]=a("super-insert-position ")),t(o,{type:"warning",text:"^1.3.0"}),e[26]||(e[26]=a()),e[27]||(e[27]=l("a",{class:"header-anchor",href:"#super-insert-position","aria-label":'Permalink to "super-insert-position <Badge type="warning" text="^1.3.0" />"'},"​",-1))]),e[40]||(e[40]=i('<ul><li>类型：Enum(<code>before</code> | <code>after</code>)</li><li>默认：<code>after</code></li></ul><p>建表的时候，父类的字段排序是在子类后面还是前面。默认为after，跟在子类的后面。</p><h3 id="recordsql" tabindex="-1">recordSql <a class="header-anchor" href="#recordsql" aria-label="Permalink to &quot;recordSql&quot;">​</a></h3><p>记录表信息维护过程中执行的SQL</p><h4 id="enable-1" tabindex="-1">enable <a class="header-anchor" href="#enable-1" aria-label="Permalink to &quot;enable&quot;">​</a></h4><p>开启记录sql日志</p><ul><li>类型：<code>Boolean</code></li><li>默认：<code>false</code></li></ul><h4 id="recordtype" tabindex="-1">recordType <a class="header-anchor" href="#recordtype" aria-label="Permalink to &quot;recordType&quot;">​</a></h4><p>记录方式，默认是数据库，可选文件(file)方式，但是需要额外指定<code>folderPath</code>配置</p><ul><li>类型：Enum(<code>db</code> | <code>file</code> | <code>custom</code>)</li><li>默认：<code>db</code></li></ul><h4 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h4><p>当前SQL的版本，建议指定，会体现在数据库的字段或者文件名上</p><ul><li>类型：<code>String</code></li><li>默认：</li></ul><h4 id="tablename" tabindex="-1">tableName <a class="header-anchor" href="#tablename" aria-label="Permalink to &quot;tableName&quot;">​</a></h4><p>数据库记录方式下，表的名字</p><ul><li>类型：<code>String</code></li><li>默认：</li></ul><h4 id="folderpath" tabindex="-1">folderPath <a class="header-anchor" href="#folderpath" aria-label="Permalink to &quot;folderPath&quot;">​</a></h4><p>文件记录方式下，必须设置该值。 记录到文件的目录（目录不存在的情况下会自动创建），sql文件名会自动按照内置规则创建</p><ul><li>类型：<code>String</code></li><li>默认：</li></ul><h3 id="mysql" tabindex="-1">mysql <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;mysql&quot;">​</a></h3><p>MySQL 相关的全局配置</p><h4 id="table-default-charset" tabindex="-1">table-default-charset <a class="header-anchor" href="#table-default-charset" aria-label="Permalink to &quot;table-default-charset&quot;">​</a></h4><ul><li>类型：<code>String</code></li><li>默认：</li></ul><p>表的默认字符集</p><h4 id="table-default-collation" tabindex="-1">table-default-collation <a class="header-anchor" href="#table-default-collation" aria-label="Permalink to &quot;table-default-collation&quot;">​</a></h4><ul><li>类型：<code>String</code></li><li>默认：</li></ul><p>表的默认排序规则</p><h4 id="column-default-charset" tabindex="-1">column-default-charset <a class="header-anchor" href="#column-default-charset" aria-label="Permalink to &quot;column-default-charset&quot;">​</a></h4><ul><li>类型：<code>String</code></li><li>默认：</li></ul><p>列的默认字符集</p><h4 id="column-default-collation" tabindex="-1">column-default-collation <a class="header-anchor" href="#column-default-collation" aria-label="Permalink to &quot;column-default-collation&quot;">​</a></h4><ul><li>类型：<code>String</code></li><li>默认：</li></ul><p>列的默认排序规则</p><h3 id="pgsql" tabindex="-1">pgsql <a class="header-anchor" href="#pgsql" aria-label="Permalink to &quot;pgsql&quot;">​</a></h3><p>PgSQL 相关的全局配置</p>',35)),l("h4",k,[e[28]||(e[28]=a("pk-auto-increment-type ")),t(o,{type:"warning",text:"^2.4.3"}),e[29]||(e[29]=a()),e[30]||(e[30]=l("a",{class:"header-anchor",href:"#pk-auto-increment-type","aria-label":'Permalink to "pk-auto-increment-type <Badge type="warning" text="^2.4.3" />"'},"​",-1))]),e[41]||(e[41]=l("ul",null,[l("li",null,[a("类型：Enum("),l("code",null,"always"),a(" | "),l("code",null,"byDefault"),a(")")]),l("li",null,[a("默认："),l("code",null,"byDefault")])],-1)),e[42]||(e[42]=l("p",null,"主键自增方式",-1))])}const B=d(u,[["render",x]]);export{S as __pageData,B as default};
