import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.DVcYaelC.js";const o=JSON.parse('{"title":"葵花宝典","description":null,"frontmatter":{"title":"葵花宝典","description":null},"headers":[],"relativePath":"指南/高级/多库适配.md","filePath":"指南/高级/多库适配.md","lastUpdated":null}'),l={name:"指南/高级/多库适配.md"};function h(k,s,p,e,d,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一个实体适配多种数据库" tabindex="-1">一个实体适配多种数据库 <a class="header-anchor" href="#一个实体适配多种数据库" aria-label="Permalink to &quot;一个实体适配多种数据库&quot;">​</a></h2><h3 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h3><p>当我们做产品的时候，客户现场是什么数据库经常是不受我们控制的，因此我们的实体需要能适配多种数据库，比如某个字段MySQL、Pgsql下表现不同。</p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>核心思路：</p><p>使用<code>@AutoColumn</code>注解的<code>dialect</code>属性，指定数据库，声明该注解仅生效于指定的数据库（<code>dialect</code>默认为空字符串，表示所有数据库都生效）。</p><p>PS：如果需要同时指定多个<code>@AutoColumn</code>注解，则需要使用<code>@AutoColumns</code>注解包裹，生效的规则是：外层优先于内层，前面优先于后面。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ColumnComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dialect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatabaseDialect.MYSQL) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅针对Mysql</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ColumnComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;备注&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoColumns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当数据库是非 MySQL、PostgreSQL时，使用框架默认映射规则</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MysqlTypeConstant.LONGTEXT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dialect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatabaseDialect.Mysql), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当数据库是 MySQL时，使用LONGTEXT</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PgsqlTypeConstant.TEXT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dialect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatabaseDialect.Pgsql) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当数据库是 PostgreSQL时，使用TEXT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String remark;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const g=i(l,[["render",h]]);export{o as __pageData,g as default};
