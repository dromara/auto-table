import{_ as e,c as s,a2 as t,o as i}from"./chunks/framework.DVcYaelC.js";const k=JSON.parse('{"title":"常见问题","description":null,"frontmatter":{"title":"常见问题","description":null},"headers":[],"relativePath":"葵花宝典/自定义类型映射.md","filePath":"葵花宝典/自定义类型映射.md","lastUpdated":1748313896000}'),l={name:"葵花宝典/自定义类型映射.md"};function n(o,a,p,d,c,h){return i(),s("div",null,a[0]||(a[0]=[t(`<h2 id="自定义类型映射" tabindex="-1">自定义类型映射 <a class="header-anchor" href="#自定义类型映射" aria-label="Permalink to &quot;自定义类型映射&quot;">​</a></h2><blockquote><p>更多自定义映射，可参考：<a href="/指南/自定义/类型映射.html">类型映射</a></p></blockquote><h3 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h3><p>框架默认的java与数据库的类型关系不符合需求，需要自定义类型映射关系</p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JavaTypeToDatabaseTypeConverter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTypeMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DatabaseDialect.MySQL, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        LocalDateTime .class, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java字段的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MySqlDefaultTypeEnum.TIMESTAMP </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据库类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p>请在AutoTable执行前，添加映射关系，否则不生效。</p></blockquote><h4 id="方案一" tabindex="-1">方案一： <a class="header-anchor" href="#方案一" aria-label="Permalink to &quot;方案一：&quot;">​</a></h4><p>可以通过实现<code>AutoTableAnnotationInterceptor</code>接口，在<code>AutoTable</code>注解拦截器中顺带添加映射关系。</p><h4 id="方案二" tabindex="-1">方案二： <a class="header-anchor" href="#方案二" aria-label="Permalink to &quot;方案二：&quot;">​</a></h4><p>版本&gt;=<code>2.1.1</code>，可以通过实现<code>AutoTableReadyCallback</code>接口，在<code>AutoTable</code>初始化完成，逻辑执行前，添加映射关系。</p><div class="tip custom-block"><p class="custom-block-title">小技巧</p><p>如果<code>addTypeMapping</code>方法的第三个参数没有想用的值，可以自己定义一个类（建议使用枚举）实现<code>DefaultTypeEnumInterface</code>接口</p></div>`,12)]))}const u=e(l,[["render",n]]);export{k as __pageData,u as default};
